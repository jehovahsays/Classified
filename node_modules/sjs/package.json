{
  "_args": [
    [
      {
        "raw": "sjs",
        "scope": null,
        "escapedName": "sjs",
        "name": "sjs",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\socket.io"
    ]
  ],
  "_defaultsLoaded": true,
  "_engineSupported": true,
  "_from": "sjs@latest",
  "_id": "sjs@0.0.3",
  "_inCache": true,
  "_location": "/sjs",
  "_nodeVersion": "v0.6.7",
  "_npmUser": {
    "name": "elmerbulthuis",
    "email": "elmerbulthuis@gmail.com"
  },
  "_npmVersion": "1.1.0-beta-10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sjs",
    "scope": null,
    "escapedName": "sjs",
    "name": "sjs",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/php"
  ],
  "_resolved": "http://registry.npmjs.org/sjs/-/sjs-0.0.3.tgz",
  "_shasum": "38cb101cfbe57b7f6aaee70062d5b59f8f9b0273",
  "_shrinkwrap": null,
  "_spec": "sjs",
  "_where": "C:\\socket.io",
  "author": {
    "name": "Elmer Bulthuis",
    "email": "elmerbulthuis@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/elmerbulthuis/sjs/issues"
  },
  "dependencies": {
    "2kenizer": "*"
  },
  "description": "Asynchronous JavaScript for synchronous people",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "38cb101cfbe57b7f6aaee70062d5b59f8f9b0273",
    "tarball": "https://registry.npmjs.org/sjs/-/sjs-0.0.3.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/elmerbulthuis/sjs#readme",
  "main": "index.js",
  "maintainers": [
    {
      "name": "elmerbulthuis",
      "email": "elmerbulthuis@gmail.com"
    }
  ],
  "name": "sjs",
  "optionalDependencies": {},
  "readme": "# SJS (Synchronous JavaScript)\nAsynchronous JavaScript for synchronous people\n\n\n## Installation\n\t\n\tnpm install sjs\n\n\n## Lambda functions\n\nsjs introduces lambda expressions to make your code a little prettier. You may use a lambda function without any arguments.\n\n\t() => 10;\n\nwill expand to\n\n\tfunction(){\n\t\treturn 10;\n\t};\n\nThere are two ways of writing lambda functions with arguments:\n\n\t(arg) => arg * 2;\n\nor\n\n\targ => arg * 2;\n\nwill both expand to\n\n\tfunction(arg){\n\t\treturn arg;\n\t}\n\nWhen using more than one argument, there is only one syntax:\n\n\t(x, y) => return x * y;\n\nwill expand to:\n\n\tfunction(x, y){\n\t\tx * y;\n\t};\n\nyou may also use curly braces to have multiple statements in your lambda function body:\n\n\t(x, y) => {\n\t\tvar z = x * y;\n\t\treturn z;\n\t}\n\nwill expend to:\n\n\tfunction(x, y){\n\t\tvar z = x * y;\n\t\treturn z;\n\t}\n\nlast, but not least. Lambda functions do not need to return a value. This is fine:\n\n\t(x, y) => console.log(x * y);\n\nand will expand to:\n\n\tfunction(x, y){\n\t\tconsole.log(x * y);\n\t}\n\nNow that we have lambda functions. Some neat stuff is possible:\n\n\tvar a = [1, 2, 3];\n\ta.sort((x,y) => Math.round(Math.random() * 2 - 1));\n\n\n## Async statement\n\nThe async statement makes async programming a lot easier. Just wrap your async code in the async block. Supply name(s) of callback functions that should be called when the async action ends and call those name(s) as if they were a function.\n\nthis:\n\n\tconsole.log('begin');\n\tasync(sync){\n\t\twindow.setTimeout(function(){\n\t\t\tsync();\n\t\t\tconsole.log('timeout!');\n\t\t}, 1000);\n\t}\n\tconsole.log('end');\n\nWill first print 'begin', then wait one second, print 'timeout!', and then print 'end'.\n\n\nAnother example:\n\n\tconsole.log('begin');\n\tasync(sync1, sync2){\n\t\twindow.setTimeout(function(){\n\t\t\tconsole.log('first timeout');\n\t\t\tsync1();\n\t\t}, 1000);\n\n\t\twindow.setTimeout(function(){\n\t\t\tconsole.log('second timeout');\n\t\t\tsync2();\n\t\t}, 2000);\n\t}\n\tconsole.log('end');\n\nthis first print 'begin', then after one second it will print 'first tieout', and two seconds after 'begin' it will print 'second timeout'. After it has printed 'first timeout' and 'second timeout' it will print 'end'.\n\n\nAnother example:\n\n\tconsole.log('begin');\n\tfor(var c = 0; c < 10; c++)\t{\n\t\tasync(sync){\n\t\t\twindow.setTimeout(function(){\n\t\t\t\tconsole.log(c);\n\t\t\t\tsync();\n\t\t\t}, 1000);\n\t\t}\n\t}\n\tconsole.log('end');\n\nthis will first print 'begig', then count from 0 to 9, printing a number every second. Finally it will print 'end'.\n\n\n\n\n\n\n",
  "readmeFilename": "readme.markdown",
  "repositories": [
    {
      "type": "git",
      "url": "git+ssh://git@github.com/elmerbulthuis/sjs.git"
    },
    {
      "type": "git",
      "url": "git@bitbucket.org:elmerbulthuis/sjs.git"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/elmerbulthuis/sjs.git"
  },
  "version": "0.0.3"
}
